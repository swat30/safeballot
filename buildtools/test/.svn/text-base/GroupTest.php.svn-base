<?php
// Call GroupTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'GroupTest::main');
}

require_once 'PHPUnit/Framework.php';

require_once 'Group.php';

/**
 * Test class for Group.
 * Generated by PHPUnit on 2008-04-27 at 14:54:35.
 */
class GroupTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    Group
     * @access protected
     */
    protected $object;

    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('GroupTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp()
    {
        $this->object = new Group;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {
    	$this->object->delete();
    }

    /**
     * @todo Implement testGetName().
     */
    public function testGetName() {
    	$this->object->setName('testgroup');
    	$this->assertEquals($this->object->getName(), 'testgroup');
    }

    /**
     * @todo Implement testGetId().
     */
    public function testGetId() {
    	$this->object->setName('testgroup');
    	$this->object->save();
    	
    	if (is_null($this->object->getId())) {
    		$this->fail();
    	}
    }

    /**
     * @todo Implement testSetName().
     */
    public function testSetName() {
        $this->object->setName('testgroup');
        $this->assertEquals($this->object->getName(), 'testgroup');
    }

    /**
     * @todo Implement testSave().
     */
    public function testSave() {
        $this->object->setName('testgroup');
        $this->object->save();
        
    	if (is_null($this->object->getId())) {
    		$this->fail();
    	}
    	
    	$this->assertEquals($this->object, new Group($this->object->getId()));
    	
    	$this->object->setName('testgroup2');
    	$this->object->save();
    	
    	$this->assertEquals($this->object, new Group($this->object->getId()));
    }

    /**
     * @todo Implement testDelete().
     */
    public function testDelete() {
		$this->object->setName('testgroup');
		$this->object->save();
    	$this->object->delete();
        $this->assertEquals(new Group(), new Group($this->object->getId()));
    }

    /**
     * @todo Implement testGetMembers().
     */
    public function testGetMembers() {
    	$group = new Group(1);
    	
        $members = $group->getMembers();
        if (!is_array($members)) {
        	$this->fail();
        }
        
        foreach ($members as $member) {
        	if (!($member instanceof User)) {
        		$this->fail();
        	}
        }
    }
    
    /**
     * @todo Implement testGetAddEditForm().
     */
    public function testGetAddEditForm() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetGroups().
     */
    public function testGetGroups() {
        $groups = $this->object->getGroups();
        if (!is_array($groups)) {
        	$this->fail();
        }
        
        foreach ($groups as $group) {
        	if (!($group instanceof Group)) $this->fail();
        }
    }
}

// Call GroupTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'GroupTest::main') {
    GroupTest::main();
}
?>
